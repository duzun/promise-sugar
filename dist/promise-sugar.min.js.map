{"version":3,"file":"promise-sugar.min.js","sources":["../promise-sugar.js"],"sourcesContent":["/**\n *  Promise syntactic sugar - no need to write \".then\"\n *\n *  @license MIT\n *  @version 2.3.0\n *  @git https://github.com/duzun/promise-sugar\n *  @umd AMD, Browser, CommonJs\n *  @author Dumitru Uzun (DUzun.Me)\n */\n\n/*globals globalThis, window, global, self */\n\nconst VERSION = '2.3.0';\n\n// -------------------------------------------------------------\nlet nativePromise = typeof Promise != 'undefined' ? Promise : (typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}).Promise;\n// -------------------------------------------------------------\nvar isArray = Array.isArray || function isArray(val) {\n    return val instanceof Array;\n};\n// -------------------------------------------------------------\n\nexport default function sweeten(p) {\n    // new Promise(p) - [[Construct]]\n    if ( this instanceof sweeten ) {\n        return sweeten(new nativePromise(p));\n    }\n\n    // Make sure p is a thenable\n    if ( !isThenable(p) ) {\n        p = nativePromise.resolve(p);\n    }\n\n    then.then = then;\n\n    let PromisePrototype = nativePromise.prototype;\n\n    // then.__proto__ = PromisePrototype; // not sure this is a good idea\n\n    // an alternative to setting then.__proto__:\n    then.constructor = nativePromise;\n\n    // Promise/A+\n    then.catch   = _catch  ;\n\n    // Q\n    then.finally = _finally;\n\n    // Goodies\n    then.timeout = _timeout;\n\n    if ( 'progress' in PromisePrototype ) {\n        then.progress = PromisePrototype.progress;\n    }\n\n    return then;\n\n    function then(onResolve, onReject, onNotify) {\n        if ( isThenable(onResolve) ) {\n            arguments[0] =\n            onResolve = _constant(onResolve);\n        }\n        if ( isThenable(onReject) ) {\n            arguments[1] =\n            onReject = _constant(onReject);\n        }\n        return sweeten(p.then.apply(p, arguments));\n    }\n}\n\n// -------------------------------------------------------------\nfunction _catch(onReject) {\n    return this.then(undefined, onReject);\n}\n\n// -------------------------------------------------------------\nfunction _finally(callback) {\n    return this.then(\n        (value) => resolver().then(() => value),\n        (reason) => resolver().then(() => { throw reason; })\n    );\n    function resolver() {\n        return sweeten.resolve(callback());\n    }\n}\n// -------------------------------------------------------------\n/**\n * Timeout a promise\n *\n * @param  int expires how long to wait for `promise` in ms\n * @param  bool throws If true, throw on timeout\n * @return Promise resolves before `expires` or rejects with timeout error\n */\nfunction _timeout(expires, throws=true) {\n    const promise = this;\n    let waiter = nWait(expires);\n    const { stop } = waiter;\n    if ( throws ) {\n        waiter = waiter.then(() => {\n            const error = new Error('Promise Timeout');\n            error.promise = promise;\n            throw error;\n        });\n    }\n    promise.then(() => stop().catch(_constant)); // no need to keep the waiter promise\n    return sweeten.race([promise, waiter]);\n}\n\n// -------------------------------------------------------------\nfunction _defer() {\n    var result = {};\n    result.promise = new nativePromise((resolve, reject, notify) => {\n        result.resolve = resolve;\n        result.reject  = reject;\n\n        // Q\n        if ( notify ) {\n            result.notify = notify;\n        }\n    });\n    return result;\n}\n// -------------------------------------------------------------\n// Some more sugar:\nsweeten.resolve = function resolve(val) { return sweeten(nativePromise.resolve(val)); };\nsweeten.reject  = function  reject(val) { return sweeten(nativePromise.reject(val)); };\nsweeten.race    = function    race(val) { return sweeten(nativePromise.race(val)); };\nsweeten.all     = function     all(val) { return sweeten(nativePromise.all(val)); };\n\nsweeten.any     = function     any(val) {\n    const prom = nativePromise.any ? nativePromise.any(val) : new nativePromise((resolve, reject) => {\n        let errors = [];\n        let count = 0;\n        function onReject(error) {\n            errors.push(error);\n            if(!--count) {\n                let error = new (typeof AggregateError == 'undefined' ? Error : AggregateError)('All promises rejected');\n                error.name = 'AggregateError';\n                error.errors = errors;\n                reject(error);\n            }\n        }\n        if(!isArray(val)) val = Array.from(val);\n        val.forEach((p) => {\n            ++count;\n            if(!isThenable(p)) p = nativePromise.resolve(p);\n            p.then(resolve, onReject);\n        });\n        // for(let p of val) {\n        //     ++count;\n        //     if(!isThenable(p)) p = nativePromise.resolve(p);\n        //     p.then(resolve, onReject);\n        // }\n    });\n    return sweeten(prom);\n};\n\nsweeten.allSettled = function allSettled(val) {\n    const prom = nativePromise.allSettled\n        ? nativePromise.allSettled(val)\n        : ((promises) => nativePromise.all(\n            promises.map((p) => p\n                .then(\n                    (value) => ({ status: 'fulfilled', value }),\n                    (reason) => ({ status: 'rejected', reason })\n                )\n            )\n        ));\n    return sweeten(prom);\n};\n\n/**\n * Similar to Promise.all(list), but accepts an object with thenable values\n *\n * @param   {Object}  val  An object with promises as values\n *\n * @return  {Promise}       Resolves to an object with all values resolved.\n */\nsweeten.allValues = function allValues(val) {\n    if ( isArray(val) ) return sweeten.all(val);\n\n    const keys = Object.keys(val);\n    const len  = keys.length;\n    const values = new Array(len);\n    let isIndexed = val.length === len;\n    for ( var i=0, k; i<len; i++) {\n        k = keys[i];\n        if ( k != i ) isIndexed = false;\n        values[i] = val[k];\n    }\n    let prom = sweeten.all(values);\n    if ( !isIndexed ) {\n        prom = prom(function (values) {\n            let ret = {};\n            for ( var i=0; i<len; i++) {\n                ret[keys[i]] = values[i];\n            }\n            return ret;\n        });\n    }\n    return prom;\n};\n\nsweeten.when    = sweeten;\nsweeten.defer   = function defer() {\n    const defer = nativePromise.defer || _defer;\n    const deferred = defer.call(nativePromise);\n    deferred.promise = sweeten(deferred.promise);\n    return deferred;\n};\n\nsweeten.wait = wait;\nsweeten.isThenable = isThenable;\nsweeten.fn = fn;\n\n// -------------------------------------------------------------\n/// Use a custom Promise implementation\nfunction usePromise(PromiseConstructor) {\n    nativePromise = PromiseConstructor;\n}\n\n// -------------------------------------------------------------\nsweeten.usePromise = usePromise;\nsweeten.VERSION    = VERSION;\n\n// -------------------------------------------------------------\n// Helpers:\n// -------------------------------------------------------------\n\n/**\n * Make an ordinary function sweet for promises.\n *\n * @param  {Function} fn A function that returns any value or Promise\n * @param  {Any} ctx Context of fn (this)\n *\n * @return {Function} equivalent of fn that always returns a sweeten Promise\n */\nfunction fn(fn, ctx) {\n    return arguments.length > 1\n        ? function () {\n            return sweeten.all(arguments)((a) => fn.apply(ctx, a));\n        }\n        : function () {\n            var ctx = this;\n            return sweeten.all(arguments)((a) => fn.apply(ctx, a));\n        }\n        ;\n}\n\nfunction nWait(timeout) {\n    var stop;\n    const waiter = new nativePromise((resolve, reject) => {\n        let id = setTimeout(resolve, timeout);\n        stop = (execute) => {\n            if(id) {\n                clearTimeout(id);\n                execute ? resolve(id) : reject(id);\n                id = undefined;\n            }\n            return waiter;\n        }\n    });\n    waiter.stop = stop;\n    return waiter;\n}\n\nfunction wait(timeout) {\n    let waiter = nWait(timeout);\n    const { stop } = waiter;\n    waiter = sweeten(waiter);\n    waiter.stop = stop;\n    return waiter;\n}\n\nfunction isThenable(p) {\n    return p && typeof p.then === 'function';\n}\n\nfunction _constant(val) {\n    return () => val;\n}\n"],"names":["nativePromise","Promise","globalThis","window","global","self","isArray","Array","val","sweeten","p","this","isThenable","resolve","then","PromisePrototype","prototype","constructor","_catch","_finally","timeout","_timeout","progress","onResolve","onReject","onNotify","arguments","_constant","apply","undefined","callback","value","resolver","reason","expires","throws","promise","waiter","nWait","stop","error","Error","race","_defer","result","reject","notify","id","setTimeout","execute","clearTimeout","all","any","errors","count","push","AggregateError","name","from","forEach","allSettled","promises","map","status","allValues","k","keys","Object","len","length","values","isIndexed","i","prom","ret","when","defer","deferred","call","wait","fn","ctx","a","usePromise","PromiseConstructor","VERSION"],"mappings":"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"}